apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

if (file('./token.gradle').exists()) {
    apply from: 'token.gradle'
}

android {
    compileSdkVersion 29
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.wa2c.android.medoly.plugin.action.tweet"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 15
        versionName "2.4.3"

        buildConfigField("String", "K1", "\"\"")
        buildConfigField("String", "K2", "\"\"")
        buildConfigField("String", "T1", "\"\"")
        buildConfigField("String", "T2", "\"\"")

        multiDexEnabled true
    }

    buildTypes {
        debug {
            versionNameSuffix 'd'
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }
    }

    dexOptions {
        javaMaxHeapSize "2g"
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:deprecation"
        }
    }

    signingConfigs {
        debug {
            storeFile file("../debug.keystore")
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
    }

    dataBinding {
        enabled = true
    }

    lintOptions {
        lintConfig file('lint.xml')
    }

    // output file
    applicationVariants.all { variant ->
        if (variant.buildType.name == "release") {
            def newName = "MedolyTwitterPlugin_${defaultConfig.versionName}"
            variant.outputs.all {
                // filename
                outputFileName = "${newName}.apk"
                // mapping
                variant.assembleProvider.get().doLast {
                    if ( variant.mappingFile != null && variant.mappingFile.exists() ) {
                        copy {
                            from variant.mappingFile
                            into outputFile.parent
                            rename { String fileName ->
                                "${newName}_mapping.txt"
                            }
                        }
                    }
                }
            }
        }
    }

}

repositories {
    google()
    jcenter()
    maven { url 'https://github.com/wa2c/medoly-library/raw/master/repository/' }
    maven { url 'https://github.com/wa2c/prefs/raw/master/repository/' }
}

dependencies {
    // Medoly library
    implementation 'com.wa2c.android:medolylibrary:1.3.1'
    // Prefs
    implementation 'com.wa2c.android:prefs:0.1.2'

    // Support Library
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.multidex:multidex:2.0.1'

    // Kotlin
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.7'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.7'

    // Firebase
    implementation 'com.google.firebase:firebase-core:17.5.0'
    implementation 'com.google.firebase:firebase-crashlytics:17.2.2'

    api 'org.twitter4j:twitter4j-core:4.0.7'
    implementation 'com.twitter.twittertext:twitter-text:3.0.1'
    implementation ('asia.ivity.android:drag-sort-listview:1.0') {
        exclude module: 'support-v4'
    }

    implementation 'com.jakewharton.timber:timber:4.7.1'
    implementation 'com.pranavpandey.android:dynamic-toasts:3.2.0'
    implementation 'com.thelittlefireman:AppKillerManager:2.1.1'
}

